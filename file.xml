<?xml version="1.0" encoding="UTF-8" standalone="no"?><post_root><post><post_id>4</post_id><user_id>2</user_id><post_date>07/18/12 15:51:12</post_date><post_title/><post_body>Sono un essere umano di sesso maschile , razza bianca caucasica colore dei capelli nero, colore degli occhi marrone-verde alto cinque piedi e dieci pollici pesante centocinquanta libbre.</post_body><username>ugo</username></post><post><post_id>3</post_id><user_id>1</user_id><post_date>03/29/12 00:41:07</post_date><post_title>Implementing Event Deregistration</post_title><post_body>The main problem with attempting to compare two std::function objects is, simply put, you cannot be sure that the two contained “function objects” are even comparable. An example is a stateless functor that you simply construct when you create the std::function object, as shown in the first example.&#13;
&#13;
Thus we need to provide an alternative method for removing function objects from our MulticastEvent. Perhaps the simplest mechanism to use is to simply return a handle which can later be used to find and remove the specific event. Doing this will require a few minor changes to our setup: We’ll want to provide a mapping mechanism from handle to std::function, so we’ll wish to change our container from a std::vector to a std::map (or similar container such as std::unordered_map). We’ll also need to provide a handle type for returning, which in our case will be a simple integral ID. Lastly we’ll need a function that, when given a handle, removes the appropriate event handler.</post_body><username>pippo</username></post><post><post_id>2</post_id><user_id>1</user_id><post_date>03/29/12 00:00:56</post_date><post_title>The New C++ - functions</post_title><post_body>C++11 significantly expanded the C++ standard library with a number of new libraries and functionality, which isn’t actually all that new if you’ve used boost. These libraries add a great deal of needed functionality, although it still doesn’t compare to the standard library you get with many other languages.&#13;
&#13;
Two of the new extensions to the standard library are function wrappers and arbitrary function binding, located in the &lt;functional&gt; header.&#13;
&#13;
Function and Bind in &lt;functional&gt;&#13;
The &lt;functional&gt; header has been expanded with a whole slew of new capabilities. Amongst those are two main things that stand out as being of particular use are the function binding capabilities and the generic function container.</post_body><username>pippo</username></post></post_root>